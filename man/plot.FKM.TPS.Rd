% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plotfunctions.R
\name{plot.FKM.TPS}
\alias{plot.FKM.TPS}
\title{Plot an object of class '\code{FKM.TPS}'}
\usage{
\method{plot}{FKM.TPS}(
  x,
  center = TRUE,
  xmin,
  xmax,
  ntime = 100,
  lab_x,
  lab_y,
  bw = FALSE,
  title,
  title_size = 15,
  axis_label_size = 15,
  axis_title_size = 15,
  legend_label_size = 15,
  strip_label_size = 15,
  type = "mean",
  ...
)
}
\arguments{
\item{x}{A object of class '\code{FKM.TPS}' output from \code{\link[=cluster.fitted]{cluster.fitted()}} or \code{\link[=cluster.coefs]{cluster.coefs()}}}

\item{center}{Logical expression indicating whether to center trajectories on individual means.}

\item{xmin, xmax}{Optional minimum and maximum values to show on x-axis.}

\item{ntime}{Optional number of times to calculate fitted values for smoothed plots.}

\item{lab_x, lab_y}{Optional labels for x- and y-axis.}

\item{bw}{Logical expression for black and white graphic.}

\item{title}{Optional title.}

\item{title_size}{Optional title size.}

\item{axis_label_size}{Optional size of axis labels.}

\item{axis_title_size}{Optional size for axis titles.}

\item{legend_label_size}{Optional size for legend.}

\item{strip_label_size}{Optional size for strip labels on graphics.}

\item{type}{Type of plot to produce. Options are \code{"mean"}, \code{"smooth"}, \code{"smooth_grid"}, \code{"raw"}, \code{"raw_grid"}, and \code{"all"}.}

\item{...}{Additional arguments}
}
\value{
A plot of the data by cluster.
}
\description{
Produces a number of plots for an object of class \code{FKM.TPS} using \code{\link[ggplot2:ggplot]{ggplot2::ggplot()}}. Possible plots include mean trajectory by cluster, spaghetti plot of raw data by cluster overlaid or in grid format, and smoothed spaghetti plot by cluster overlaid or in grid format.
}
\examples{
data(TS.sim)

fitsplines <- TPSfit(TS.sim, vars=c("Var1", "Var2", "Var3"), time="Time",
     ID="SubjectID", knots_time=c(0, 91, 182, 273, 365), n_fit_times=10)

clusters1 <- cluster.fitted(fitsplines, k=3, m=1.3, seed=12345, RS=5, noise=TRUE)
plot(clusters1, type="raw_grid", strip_label_size=10, axis_label_size=10)
plot(clusters1, type="mean", legend_label_size=15, lab_y="Outcome")
}
