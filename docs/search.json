[{"path":"/articles/demo.html","id":"introduction","dir":"Articles","previous_headings":"","what":"1. Introduction","title":"Clustering Multivariate Longitudinal Data using Tensor Product Smoothing Splines","text":"Electronic health records (EHR) provide wealth patient information repeated measures multiple lab values time. longitudinal datasets become increasingly common medical records computerized, offering opportunities clinical research examine biomarkers change time rather one single timepoint. common approach analyzing trajectories lab values identify subgroups patients similar characteristics, assess association group membership future outcomes (Aghabozorgi, Shirkhorshidi, Wah 2015; Nylund-Gibson, Grimm, Masyn 2019). Two general methods often employed classify trajectories: latent trajectory methods growth mixture modeling (GMM) group-based trajectory modeling (GBTM) (Nest et al. 2020), unsupervised machine learning methods k-means clustering. extensive applications longitudinal data grouped based trajectory single biomarker, fewer studies focus grouping multivariate trajectory data. Latent trajectory methods assume underlying latent grouping variable “severity disease” manifest observed variables. posterior probability class membership estimated individual using maximum likelihood methods. GMM estimates mean growth curve class represents individual variation using random effects (Muthen Muthen 2000). package lcmm (Proust-Lima et al. 2022) R ( Core Team 2017) can used estimate growth mixture models various extensions, including multlcmm() function multivariate trajectories. GBTM, hand, use random effects capture individual differences assumes equal variance across time classes (Herle et al. 2020). lcmm package can also used GBTM, well PROC TRAJ Jones Nagin (2007)] SAS ( Institute Inc. 2016). multivariate extension also developed PROC TRAJ. methods provide valuable tool, require distributional assumptions can high computational costs (particularly GMMs) potential convergence issues, especially applied large datasets datasets outliers (Den Teuling, Pauws, Heuvel 2020). Clustering methods also used extensively classify trajectory data. algorithms, k-means, k-medoids, hierarchical clustering, lower computational cost compared methods GMM, require data measured time points individual. feature rarely found clinical datasets, pre-processing step sometimes implemented, trajectories estimated using splines, clustering algorithms applied spline basis coefficients fitted spline values Abraham et al. (2003); D’Urso et al. (2021)]. Smoothing splines offer additional advantage noise data reduction. number multivariate clustering methods proposed, including clustering p-values hypothesis tests difference autoregressive parameter estimates (Maharaj 1999), using principal components analysis calculate degree similarity , wavelet analysis (D’Urso Maharaj 2012). number R packages developed cluster trajectory data. package traj (Sylvestre et al. 2006; Leffondree et al. 2004) implements stepwise method 24 change indices computed assess different aspects longitudinal pattern, principal components analysis used determine important features, lastly k-means clustering conducted change indices. kml R package (Genolini et al. 2015) utilizes k-means clustering trajectory data imputation methods available missing data. extended kml3d package (Genolini et al. 2015), clusters based two trajectories. recent paper comparing traj, kml, lcmm found kml showed best clustering accuracy, cluster separation, stability (Verboon Pat El 2022). indicates non-model-based methods k-means potential work well better complex computationally costly methods GMM. TPSClus package utilizes non-model-based methods efficiently identify clusters datasets three trajectory variables interest, efficiency handle large datasets sometimes found containing EHR data. Rather imputing missing data, method fits smoothing splines trajectories individual. order account likely correlation variables, multidimensional tensor product splines used, implemented using generalized additive model (GAM) R package mgcv (S. N. Wood 2011, 2003). user option conducting fuzzy c-medoids clustering either spline basis coefficients fitted values user-defined points. addition, option inclusion noise cluster outliers. fuzzy clustering implemented using R package fclust [Ferraro, Giordani, Serafini (2019)}, yields degree cluster membership individual. clusters can used predictors generalized linear model (GLM) distal outcome desired. package offers numerous plot functions, ability predict cluster membership distal outcomes new datasets. section 2, examine data structure provide review tensor product splines. section 3, review fuzzy clustering methods detail methodology inclusion fuzzy clusters predictors GLMs. section 4, provide overview package TPSClus, demonstrating primary functions features. Section 5 concludes summarizes.","code":""},{"path":"/articles/demo.html","id":"smoothing-multivariate-longitudinal-data","dir":"Articles","previous_headings":"","what":"2. Smoothing multivariate longitudinal data","title":"Clustering Multivariate Longitudinal Data using Tensor Product Smoothing Splines","text":"clinical databases measurements taken time, rare individuals measured time points frequency. result, pre-processing step must implemented prior applying partitional clustering algorithm k-mean, k-medoids, hierarchical clustering. One common approach use smoothing splines (Abraham et al. 2003; D’Urso et al. 2021; Iorio et al. 2016), added benefit reducing measurement error noise . case multiple trajectories interest, can incorporate correlation trajectories smoothing process using multidimensional tensor product smoothing splines.","code":""},{"path":"/articles/demo.html","id":"data-structure","dir":"Articles","previous_headings":"2. Smoothing multivariate longitudinal data","what":"2.1 Data structure","title":"Clustering Multivariate Longitudinal Data using Tensor Product Smoothing Splines","text":"multivariate time series can structured three-dimensional array form subjects \\(\\times\\) variables \\(\\times\\) times (D’Urso, De Giovanni, Massari 2018; D’Urso 2000). trajectories single individual \\(\\mathbf{Y}_{}=\\{y_{izt}:z=1 \\dots Z; t=1 \\dots T_{}\\}\\), \\(Z\\) number variables \\(T_i\\) number observations subject \\(\\), can plotted plane Cartesian three-space, seen Figure 1. instantaneous, cross-sectional dissimilarity two trajectories measured timepoints \\(\\mathbf{Y}_i\\) \\(\\mathbf{Y}_{'}\\) can defined using squared Euclidean distance: \\[{}_{1}d_{ii'}^{2}= \\sum_{t = 1}^{T} \\| \\mathbf{y}_{} - \\mathbf{y}_{'t} \\|^2.\\] distance , however, take account longitudinal nature data. One simple approach allows us capture information intervals timepoints define \\(\\mathbf{v}_{} = \\mathbf{y}_{} - \\mathbf{y}_{(t-1)}\\) variation, slope, trajectory \\(\\mathbf{Y}_i\\) interval \\([t-1,t]\\). longitudinal dissimilarity measure \\(\\mathbf{Y}_i\\) \\(\\mathbf{Y}_{'}\\) can defined : \\[{}_{2}d_{ii'}^{2}= \\sum_{t = 1}^{T} \\| \\mathbf{y}_{} - \\mathbf{y}_{'t} \\|^2 + \\sum_{t = 2}^{T} \\| \\mathbf{v}_{} - \\mathbf{v}_{'t} \\|^2.\\] mixed approach can used simultaneously consider cross-sectional longitudinal features, dissimilarity given : \\[d_{ii'}^{2}= \\sum_{t = 1}^{T} \\| \\mathbf{y}_{} - \\mathbf{y}_{'t} \\|^2 + \\sum_{t = 2}^{T} \\| \\mathbf{v}_{} - \\mathbf{v}_{'t} \\|^2.\\]","code":""},{"path":"/articles/demo.html","id":"tensor-product-splines","dir":"Articles","previous_headings":"2. Smoothing multivariate longitudinal data","what":"2.2 Tensor product splines","title":"Clustering Multivariate Longitudinal Data using Tensor Product Smoothing Splines","text":"order smooth multiple trajectories simultaneously, tensor product splines can fit using GAM. basic approach, described detail (S. N. Wood 2017; Simon N. Wood 2006), begin marginal smooths covariates interest, case variable time. tensor product used create smooth multiple variables marginal smooths. two covariates (variable time), \\(z\\) \\(t\\). low-rank base can chosen , representing smooth function covariate, \\(f_z\\) \\(f_t\\): \\[f_{z}(z)= \\sum_{j=1}^{J} \\alpha_j a_j(z)   \\quad\\mathrm{}\\quad   f_{t}(t)= \\sum_{k=1}^{K} \\alpha_k a_k(t)\\] \\(\\alpha_j\\) \\(\\delta_k\\) parameters, \\(a_{j}(z)\\) \\(d_{k}(t)\\) basis functions, \\(J\\) \\(K\\) corresponding number basis functions. allow parameters \\(f_z\\) vary smoothly \\(t\\), \\(f_z\\) can converted function \\(z\\) \\(t\\). use basis \\(t\\) get: \\[\\alpha_{j}(t)= \\sum_{k=1}^{K} \\delta_(jk) d_{k}(t)\\] follows \\[f_{zt}(z,t)= \\sum_{j=1}^{J} \\alpha_j a_{j}(z) = \\sum_{j=1}^{J} \\sum_{k=1}^{K} \\delta_{jk} d_{k}(t)a_{j}(z).\\] set observations \\(z\\) \\(t\\) model matrices marginal smooths, \\(\\mathbf{X}_z\\) \\(\\mathbf{X}_t\\). model matrix \\(\\mathbf{X}\\), maps parameters \\(\\delta_{jk}\\) (arranged vector \\(\\delta\\)) evaluated function \\(f_{zt}(z,t)\\) \\(z\\) \\(t\\), can calculated using Kronecker product model matrices marginal smooths. \\(\\)-th row \\(\\mathbf{X}\\) given : \\[\\mathbf{X}_{}= \\mathbf{X}_{zi} \\otimes \\mathbf{X}_{ti}\\] order smooth tensor product basis, roughness also measured using marginal smooth functions, assumption associated function measures roughness function can expressed quadratic form marginal parameters. , use cubic spline penalties used marginal penalties, roughness \\(f_{zt}\\) can measured : \\[\\begin{equation} J(f_{zt})= \\int_{z,t} \\left[ \\lambda_{z} \\left( \\frac{\\delta^{2}f}{\\delta z^2} \\right) ^2 + \\lambda_t \\left( \\frac{\\delta^{2}f}{\\delta t^2} \\right) ^2 \\right] \\mathrm{d}z \\mathrm{d}t (\\#eq:rough) \\end{equation}\\] \\(\\lambda_{\\cdot}\\) smoothing parameters control tradeoff roughness different directions allow penalty independent scaling variables. coefficients smoothing parameters tensor product smooth estimated GAM using R package mgcv.","code":""},{"path":"/articles/demo.html","id":"fuzzy-clustering-of-time-series","dir":"Articles","previous_headings":"","what":"3. Fuzzy clustering of time series","title":"Clustering Multivariate Longitudinal Data using Tensor Product Smoothing Splines","text":"multiple time series smoothed, clustering algorithm can applied. One option cluster spline coefficients D’Urso et al. (2021) D’Urso, De Giovanni, Vitale (2022). Alternatively, clustering can conducted fitted values spline knots chosen timepoints, well slopes points, distance defined section 2.1. primary interest shape trajectory, shape can isolated centering individual means trajectory (Heggeseth Jewell 2018). clusters allow identification individuals similar characteristics, cluster membership might subsequently used prognostic variable GLM distal outcome.","code":""},{"path":"/articles/demo.html","id":"fuzzy-clustering-algorithm","dir":"Articles","previous_headings":"3. Fuzzy clustering of time series","what":"3.1 Fuzzy clustering algorithm","title":"Clustering Multivariate Longitudinal Data using Tensor Product Smoothing Splines","text":"k-means algorithm partitions objects \\(k\\) clusters object placed cluster nearest mean, usually measured squared Euclidean distance. number clusters \\(k\\) pre-specified, algorithm iterative, means recalculated cluster step, within-cluster variance minimized (Hastie, Tibshirani, Friedman 2009). k-medoids clustering algorithm, also called partitioning around medoids (PAM) approach, similar k-means algorithm, except uses observed values within data centers, medoids, cluster. method shown robust outliers k-means algorithm (Arora, Deepali, Varshney 2016; Kaufman Rousseeuw 2009). K-means k-medoids algorithms provide “crisp” partitions individuals assigned exactly one cluster. Fuzzy c-means (Bezdek 2013) fuzzy c-medoids (Krishnapuram et al. 2001) clustering methods developed “fuzzy” counterparts, individual’s membership degree calculated cluster. Fuzzy clustering offers advantage real applications clear boundaries clusters (Alonso et al. 2021), provides additional information regarding certainty cluster assignments (Everitt 2011), still computationally efficient. \\(\\mathbf{X}={\\mathbf{x}_i |=1, \\dots ,n}\\) set values \\(n\\) subjects, can let \\(\\mathbf{V}={\\mathbf{v}_1, \\mathbf{v}_2, \\dots , \\mathbf{v}_c}\\) set cluster means cluster medoids, \\(\\mathbf{x}_i\\) \\(\\mathbf{v}_j\\) scalar univariate data mathbfors multivariate data \\(c\\) number clusters. fuzzy c-medoids clustering, \\(\\mathbf{V}\\) subset size \\(c\\) \\(\\mathbf{X}\\). fuzzy c-means fuzzy c-medoids algorithm minimize \\[\\begin{equation} \\mathop{\\arg \\min}\\limits_{\\mathbf{V}}= \\sum_{=1}^{n} \\sum_{j=1}^{c} u_{ij}^{m} \\|\\mathbf{x}_{} - \\mathbf{v}_j \\|^{2}. \\end{equation}\\] objective function, \\(u_{ij}\\) represents degree membership \\(\\mathbf{x}_i\\) cluster \\(j\\), often defined : \\[\\begin{equation} u_{ij}= \\frac{1}{\\sum_{k=1}^{c} \\left( \\frac{\\|\\mathbf{x}_{} - \\mathbf{v}_j \\|}{\\|\\mathbf{x}_{} - \\mathbf{v}_k \\|} \\right)^{\\frac{2}{m-1}}} \\end{equation}\\] \\(m\\) “fuzziness” parameter, \\(m \\[1,\\infty)\\). Higher values m indicate higher fuzziness, individuals likely belong clusters. widely accepted optimal value \\(m\\), related number separation clusters dataset (Huang et al. 2012). \\(m \\1_{+}\\), fuzzy clustering algorithm reduces hard clustering algorithm, \\(m\\) increases, clusters blend together. 2019, Zhou Yang (2019) published experimental study found optimal value datasets \\(m = 1.2\\), default value used TPSClus clustering functions. number strategies introduced reduce influence outliers clustering process. One method introduction artificial \\((c+1)\\)-th cluster, called noise cluster, outlying values. Individuals distance greater \\(\\delta\\) medoids classified noise cluster. distance \\(\\delta\\) generally chosen average distance individuals cluster means, may pre-specified control number individuals classified outliers. noise cluster included, equation \\(u_{ij}\\) replaced : \\[\\begin{equation} u_{ij}= \\frac{\\left[ \\frac{1}{|\\mathbf{x}_{} - \\mathbf{v}_k \\|^2} \\right] ^{\\frac{1}{m-1}}}{\\sum_{k=1}^{c} \\left[ \\frac{1}{\\|\\mathbf{x}_{} - \\mathbf{v}_k \\|} \\right]^{\\frac{1}{m-1}} + \\left[ \\frac{1}{\\delta^2} \\right]^{\\frac{1}{m-1}}} \\end{equation}\\] degree membership noise cluster \\[\\begin{equation} u_{(j+1)}= \\frac{\\left[ \\frac{1}{\\delta^2} \\right] ^{\\frac{1}{m-1}}}{\\sum_{k=1}^{c} \\left[ \\frac{1}{\\|\\mathbf{x}_{} - \\mathbf{v}_k \\|} \\right]^{\\frac{1}{m-1}} + \\left[ \\frac{1}{\\delta^2} \\right]^{\\frac{1}{m-1}}} \\end{equation}\\] clustering algorithm implemented using R package fclust (Ferraro, Giordani, Serafini 2019).","code":""},{"path":"/articles/demo.html","id":"including-clusters-as-predictors-in-a-statistical-model","dir":"Articles","previous_headings":"3. Fuzzy clustering of time series","what":"3.2 Including clusters as predictors in a statistical model","title":"Clustering Multivariate Longitudinal Data using Tensor Product Smoothing Splines","text":"identifying clusters individuals similar characteristics, often interest examining association cluster assignment outcome interest. straightforward approach construct GLM using modal cluster assignment categorical variable. approach, however, assumes cluster assignment certain, often case. Fuzzy clustering, however, provides additional information degree cluster membership. information can incorporated GLM account clustering uncertainty using partial assignment method, c - 1 dummy variables cluster membership used, degree cluster membership inserted model variables rather zero one (Lythgoe, Garcia-Fiñana, Cox 2019). Additional covariates can also included model.","code":""},{"path":"/articles/demo.html","id":"the-tpsclus-package","dir":"Articles","previous_headings":"","what":"4. The TPSClus package","title":"Clustering Multivariate Longitudinal Data using Tensor Product Smoothing Splines","text":"TPSClus package designed implement three-step methodology described sections 2 3. TPSfit() function fits tensor product splines multivariate longitudinal data. cluster.fitted() cluster.coefs() functions apply fuzzy c-medoids clustering smoothed data. FKM.glm() function fits GLM cluster assignment independent variable, incorporated using partial assignment method. package requires R packages mgcv, fclust, dplyr, tidyr, well ggplot2 graphics produced.","code":""},{"path":"/articles/demo.html","id":"fitting-tensor-product-splines-in-tpsclus","dir":"Articles","previous_headings":"4. The TPSClus package","what":"4.1 Fitting tensor product splines in TPSClus","title":"Clustering Multivariate Longitudinal Data using Tensor Product Smoothing Splines","text":"simple illustration functionality TPSClus package, use simulated time series dataset containing three variables collected period one year. dataset structured long format, subject ID variable, time variable, three variables measured time point, two fixed covariates, binary outcome variable. TPSfit() function fits tensor product splines three variables repeated measures, case Var1, Var2, Var3. splines fitted using gam() function package mgcv cubic spline basis. time variable, user may choose either specify location knots, specify number knots, spaced evenly across total time period. necessary individuals measured roughly time period, individual adequate number observations support chosen number knots. TPSfit() runs , produce warning message individuals unable fit spline given number knots, list subjects included output. simple fit using 5 knots time variable, can run Splines fit 150 subjects. GAMsfitted dataset contains fitted spline values knots, GAMScoef dataset contains spline coefficients. default, function standardizes variables order equalize multivariate data RN283. individual, mean trajectory also produced, along values centered individual mean. can seen GAMsfitted dataset: default, fitted values calculated knots, alternate fitted values can specified fit_times option. Additional fitted values might yield better clustering results, also slow clustering algorithm. TPSfit() function produces object class 'TPSfit' can input cluster.fitted() cluster.coef() function conduct fuzzy clustering fitted tensor product splines.","code":"library(\"TPSClus\") data(\"TS.sim\") head(TS.sim) #>   SubjectID Time Var1 Var2 Var3 x1   x2 outcome #> 1        17    0  4.5 10.0  5.7  0 27.9       1 #> 2        17    7  5.6 10.6  5.9  0 27.9       1 #> 3        17   35  7.0 10.1  3.9  0 27.9       1 #> 4        17   73  7.3  9.9  4.4  0 27.9       1 #> 5        17   79  7.1 12.8  5.9  0 27.9       1 #> 6        17   80  5.5 11.0  6.1  0 27.9       1 fitsplines1 <- TPSfit(TS.sim, vars=c(\"Var1\", \"Var2\", \"Var3\"), time=\"Time\", ID=\"SubjectID\", kt=5) print(fitsplines1) #> Object of type 'TPSfit' #>  #> Tensor-product splines fit for 150 out of 150 subjects #> Variables of interest: Var1 Var2 Var3  #> Time knots: 0 91 182 273 364  #> Output: GAMscoef contains model coefficients #> Output: GAMsfitted has fitted values at times: 0 91 182 273 364  #>  #> Available components: #>  [1] \"GAMsfitted\"     \"GAMscoef\"       \"fit_times\"      \"vars\"           #>  [5] \"data_long\"      \"knots\"          \"indiv_means\"    \"GAMs\"           #>  [9] \"nsubjects\"      \"ID\"             \"IDmatch\"        \"error_subjects\" #> [13] \"call\" head(fitsplines1$GAMsfitted) #>   Id2 SubjectID FitTime Variable          x t      mean_x  centered_x #> 1   1        17       0        1 -0.7351913 1 -0.11890952 -0.61628180 #> 2   1        17       0        2 -0.4458700 1 -0.05598468 -0.38988534 #> 3   1        17       0        3 -0.2976551 1 -0.17464892 -0.12300614 #> 4   1        17      91        1 -0.3394761 2 -0.11890952 -0.22056654 #> 5   1        17      91        2 -0.1960867 2 -0.05598468 -0.14010198 #> 6   1        17      91        3 -0.2530180 2 -0.17464892 -0.07836904 fitsplines2 <- TPSfit(TS.sim, vars=c(\"Var1\", \"Var2\", \"Var3\"), time=\"Time\", ID=\"SubjectID\", knots_time=c(0, 91, 182, 273, 365),      fit_times=c(46, 91, 137, 182, 228, 273, 319)) print(fitsplines2) #> Object of type 'TPSfit' #>  #> Tensor-product splines fit for 150 out of 150 subjects #> Variables of interest: Var1 Var2 Var3  #> Time knots: 0 91 182 273 365  #> Output: GAMscoef contains model coefficients #> Output: GAMsfitted has fitted values at times: 46 91 137 182 228 273 319  #>  #> Available components: #>  [1] \"GAMsfitted\"     \"GAMscoef\"       \"fit_times\"      \"vars\"           #>  [5] \"data_long\"      \"knots\"          \"indiv_means\"    \"GAMs\"           #>  [9] \"nsubjects\"      \"ID\"             \"IDmatch\"        \"error_subjects\" #> [13] \"call\""},{"path":"/articles/demo.html","id":"fuzzy-clustering-in-tpsclus","dir":"Articles","previous_headings":"4. The TPSClus package","what":"4.2 Fuzzy clustering in TPSClus","title":"Clustering Multivariate Longitudinal Data using Tensor Product Smoothing Splines","text":"fitting splines, implement fuzzy clustering algorithm. noise cluster optional frequently needed robustness outliers. can examine data outliers using plot function 'TPSfit' object outputted first step, case look standardized raw data shown Figure 2.  Due observation several outlying trajectories, leave default noise = TRUE option. start clustering spline coefficients k = 2 clusters 10 random starts. cluster validity indices allow comparison multiple clusterings helpful determination correct number clusters. Two commonly applied indices fuzzy clustering Fuzzy Silhouette index, labeled SIL.F (Campello Hruschka 2006) Xie-Beni index, labeled XB (Xie Beni 1991). maximum value Fuzzy Silhouette minimum value Xie-Beni index used identify optimal number clusters. According Fuzzy Silhouette Xie-Beni indices, optimal number clusters dataset three. alternate method clustering cluster based fitted spline values slopes values. can apply using three clusters comparison. Clustering fitted values appears improve clustering results. Note used default values cluster.fitted() function addslopes = TRUE (includes slope points addition cross-sectional values point), center = TRUE (centers trajectory individual mean), m = 1.2. full details clustering results can viewed using summary function. number graphics available, including plot showing mean trajectory cluster, well spaghetti plots may overlaid displayed grid format.   output dataset FKM_TPS_U contains degree cluster assignment individual, well modal cluster assignment.","code":"plot(fitsplines2, type=\"raw\") ccoefs_2 <- cluster.coefs(fitsplines2, k=2, RS=10, seed=1234) ccoefs_2$FKM_indices #>        PC        PE       MPC       SIL     SIL.F        XB  #> 0.6795184 0.2448186 0.3590367 0.2246924 0.2483164 0.8582490 ccoefs_3 <- cluster.coefs(fitsplines2, k=3, RS=10, seed=1234) ccoefs_4 <- cluster.coefs(fitsplines2, k=4, RS=10, seed=1234) ccoefs_5 <- cluster.coefs(fitsplines2, k=5, RS=10, seed=1234) compare <- rbind(ccoefs_2$FKM_indices, ccoefs_3$FKM_indices, ccoefs_4$FKM_indices, ccoefs_5$FKM_indices) row.names(compare) <- c(\"k=2\", \"k=3\", \"k=4\", \"k=5\") compare[,5:6] #>         SIL.F        XB #> k=2 0.2483164 0.8582490 #> k=3 0.3359611 0.4794297 #> k=4 0.3210678 0.8333409 #> k=5 0.2684423 1.1316547 cfit_3 <- cluster.fitted(fitsplines2, k=3, RS=10, seed=1234) compare2 <- rbind(ccoefs_3$FKM_indices, cfit_3$FKM_indices) row.names(compare2) <- c(\"coefficients\", \"fitted values\") compare2[,5:6] #>                   SIL.F        XB #> coefficients  0.3359611 0.4794297 #> fitted values 0.4814252 0.4135123 summary(cfit_3) #> cluster.fitted(TPSdata = fitsplines2, k = 3, seed = 1234, RS = 10) #>  #> 150 subjects clustered into 3 clusters + noise cluster using m = 1.2  #> Clusters based on fitted values at times 46 91 137 182 228 273 319  #> and slopes between points #>  #> Cluster summary: #>       Cl.size Min.degree Max.degree Mean.degree #> Clus1      49      0.303      1.000       0.965 #> Clus2      50      0.788      1.000       0.993 #> Clus3      46      0.977      1.000       0.999 #> Noise       5      0.439      0.995       0.830 #>  #> Component 'FKM_TPS' contains the fuzzy clustering details from package 'fclust'. #> Components of 'FKM_TPS': #>  [1] \"U\"         \"H\"         \"F\"         \"clus\"      \"medoid\"    \"value\"     #>  [7] \"criterion\" \"iter\"      \"k\"         \"m\"         \"ent\"       \"b\"         #> [13] \"vp\"        \"delta\"     \"stand\"     \"Xca\"       \"X\"         \"D\"         #> [19] \"call\"      #>  #> Cluster validity indices: #>         PC         PE        MPC        SIL      SIL.F         XB  #> 0.94952330 0.04157604 0.92428495 0.46242525 0.48142523 0.41351228  #>  #> Output dataset 'FKM_TPS_U' contains degree of cluster membership and modal #>       cluster assignment for each object. #> Head of dataset 'FKM_TPS_U': #>   Id2 SubjectID        Clus1        Clus2        Clus3        Noise ClusModal #> 1   1        17 4.739759e-08 1.000000e+00 2.668276e-11 4.322098e-13         2 #> 2   2        19 3.017424e-05 9.380437e-06 9.999604e-01 5.364980e-08         3 #> 3   3        34 1.025170e-08 1.000000e+00 1.407161e-12 1.454392e-14         2 #> 4   4        52 4.097481e-08 1.000000e+00 9.080800e-12 1.292300e-13         2 #> 5   5        55 1.633734e-05 5.442627e-06 9.999782e-01 2.370104e-08         3 #> 6   6        83 2.273020e-04 4.444262e-05 9.997262e-01 2.035284e-06         3 plot(cfit_3, type=\"mean\", legend_label_size=12) #> `geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = \"cs\")' plot(cfit_3, type=\"raw_grid\", axis_label_size=12, strip_label_size=12)"},{"path":"/articles/demo.html","id":"fitting-a-glm-with-fuzzy-clusters-as-predictors-in-tpsclus","dir":"Articles","previous_headings":"","what":"4.3 Fitting a GLM with fuzzy clusters as predictors in TPSClus","title":"Clustering Multivariate Longitudinal Data using Tensor Product Smoothing Splines","text":"often interest examine association cluster assignment outcome interest. using modal cluster assignment independent variable fairly straightforward, TPSClus provides function adding clusters GLM using partial assignment method described section 3.2. function FKM.glm() uses output object cluster.coefs() cluster_fitted() along original dataset containing outcome variable interest. retains full functionality glm() function, including options different family link functions offset variables. number fixed covariates may also included independent variables model, addition cluster assignment. TS.sim dataset, two covariates, x1 x2, binary outcome variable. Therefore, fit logistic model using clusters identified previously, cluster 1 default reference cluster. can see assignment cluster 3 statistically significant comparison cluster 1 assignment. Overall, p-value inclusion clusters model 0.07.","code":"model <- FKM.glm(cfit_3, TS.sim, y=\"outcome\", covariates=c(\"x1\", \"x2\"), family=\"binomial\") summary(model) #> Full model: #> Formula (f1):  outcome ~ Clus2 + Clus3 + Noise + x1 + x2  #> Family: binomial  #>  #> Call: #> glm(formula = f1, family = family, data = data3) #>  #> Deviance Residuals:  #>      Min        1Q    Median        3Q       Max   #> -1.97354  -0.24706  -0.02364   0.15876   2.10229   #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|)     #> (Intercept) 10.16346    2.04052   4.981 6.33e-07 *** #> Clus2        0.98968    0.83743   1.182   0.2373     #> Clus3        2.22895    0.96709   2.305   0.0212 *   #> Noise        2.98192    2.15768   1.382   0.1670     #> x1           0.81151    0.67257   1.207   0.2276     #> x2          -0.26979    0.05146  -5.242 1.58e-07 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 201.065  on 149  degrees of freedom #> Residual deviance:  65.561  on 144  degrees of freedom #> AIC: 77.561 #>  #> Number of Fisher Scoring iterations: 7 #>  #>  #> ANOVA chi-square p-value for significance of clusters in model: #> 0.07274037"},{"path":"/articles/demo.html","id":"making-predictions-about-new-data-in-tpsclus","dir":"Articles","previous_headings":"4.3 Fitting a GLM with fuzzy clusters as predictors in TPSClus","what":"4.4 Making predictions about new data in TPSClus","title":"Clustering Multivariate Longitudinal Data using Tensor Product Smoothing Splines","text":"clusters identified dataset model developed utilizing clusters predictor variables, often interest predicting cluster assignment outcome new set individuals. predict functions TPSClus allow . order predict cluster assignment degrees cluster membership, use predict function class 'FKM.TPS' object output cluster.coefs() cluster_fitted(), along new set data. case, use simulated dataset TS.sim.new, contains data 30 new subjects. wish predict outcome new patients based previously developed model, may use prediction function 'FKM.glm' class object output FKM.glm() function, along new dataset. necessary predict cluster assignments first. predicted value output dataset predicted probability binary outcome. mean value predicted probability 0.41.","code":"cfit_pred <- predict(cfit_3, TS.sim.new) summary(cfit_pred) #> Object of type 'FKM.predicted' #> predict.FKM.TPS(object = cfit_3, newdata = TS.sim.new) #>  #> Tensor-product splines fit for 30 out of 30 subjects #>  #> Degree of membership calculated based on clusters from input 'FKM.TPS' object. #> 30 subjects clustered into 3 clusters + noise cluster #>  #> Clusters based on fitted values at times 46 91 137 182 228 273 319  #> and slopes between points #>  #> Cluster summary for new data: #>       Cl.size Min.degree Max.degree Mean.degree #> Clus1      12      0.576          1       0.941 #> Clus2      10      0.909          1       0.991 #> Clus3       8      0.960          1       0.988 #>  #> Output dataset 'predicted_U' contains degree of cluster membership and modal #>       cluster assignment for each object. #> Head of dataset 'predicted_U': #>   Id2 SubjectID        Clus1        Clus2        Clus3        Noise ClusModal #> 1   1      1626 5.894418e-09 0.9999999941 2.651672e-12 3.830269e-14         2 #> 2   2      1627 1.173724e-03 0.0003101768 9.985158e-01 3.041344e-07         3 #> 3   3      1629 2.177904e-02 0.0115980191 9.666197e-01 3.292821e-06         3 #> 4   4      1634 1.184537e-10 0.9999999999 2.314156e-14 2.220446e-16         2 #> 5   5      1641 7.284988e-01 0.2613819696 6.649319e-03 3.469900e-03         1 #> 6   6      1650 2.956685e-13 1.0000000000 6.299418e-17 0.000000e+00         2 pred_outcome <- predict(model, TS.sim.new) head(pred_outcome) #>   SubjectID x1   x2 Id2        Clus1        Clus2        Clus3        Noise #> 1      1626  0 23.5   1 5.894418e-09 0.9999999941 2.651672e-12 3.830269e-14 #> 2      1627  0 87.2   2 1.173724e-03 0.0003101768 9.985158e-01 3.041344e-07 #> 3      1629  0 59.3   3 2.177904e-02 0.0115980191 9.666197e-01 3.292821e-06 #> 4      1634  0 36.3   4 1.184537e-10 0.9999999999 2.314156e-14 2.220446e-16 #> 5      1641  1 49.6   5 7.284988e-01 0.2613819696 6.649319e-03 3.469900e-03 #> 6      1650  0 34.1   6 2.956685e-13 1.0000000000 6.299418e-17 0.000000e+00 #>   ClusModal    predicted #> 1         2 9.919424e-01 #> 2         3 1.457288e-05 #> 3         3 2.486555e-02 #> 4         2 7.957166e-01 #> 5         1 1.069007e-01 #> 6         2 8.758032e-01 summary(pred_outcome$predicted) #>     Min.  1st Qu.   Median     Mean  3rd Qu.     Max.  #> 0.000000 0.001644 0.274358 0.409432 0.833822 0.999997"},{"path":"/articles/demo.html","id":"summary-and-discussion","dir":"Articles","previous_headings":"","what":"5. Summary and discussion","title":"Clustering Multivariate Longitudinal Data using Tensor Product Smoothing Splines","text":"TPSClus package provides methodology multivariate fuzzy clustering longitudinal data. package provides multiple plots enable visualization clustered data. Cluster assignment may used predictor GLM taking uncertainty cluster assignment account. additional package provides options predicting cluster assignment outcomes new data. Many limitations TPSClus inherent clustering algorithms. methods identify clusters based entirely trajectory shapes, reality, clusters construct simplicity interpretation well-defined real EHR dataset. determination optimal number clusters remains unsettled issue. package, provide several indices plots help make decision number clusters use, indices often disagree optimal number clusters, index widely accepted reliable. packages R allow clustering trajectories multiple variables simultaneously. TPSClus methodology non-parametric, avoiding issues assumptions trajectory shape computational cost associated GMM models. addition, package offers options robustness outliers including clusters GLMs independent variables. also provides valuable visualization tools. number topics need investigation. mentioned , identifying optimal number clusters important unresolved issue. also many methods presented literature clustering multivariate trajectory data, little research compares methods. TPSClus package provides method identifying clusters based multiple trajectories longitudinal data. non-parametric fuzzy c-medoids algorithm particularly useful large datasets outliers, EHR databases, methods can suffer convergence issues high computational cost. tools offered package provide researchers valuable tool analysis increasingly common data format.","code":""},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sherry Livingston. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Livingston S (2023). TPSClus: Clustering Multivariate Longitudinal Data using Tensor-Product Splines. R package version 0.0.0.9000, https://silivingston.github.io/TPSClus/.","code":"@Manual{,   title = {TPSClus: Clustering Multivariate Longitudinal Data using Tensor-Product Splines},   author = {Sherry Livingston},   year = {2023},   note = {R package version 0.0.0.9000},   url = {https://silivingston.github.io/TPSClus/}, }"},{"path":"/index.html","id":"tpsclus","dir":"","previous_headings":"","what":"Clustering Multivariate Longitudinal Data using Tensor-Product Splines","title":"Clustering Multivariate Longitudinal Data using Tensor-Product Splines","text":"TPSClus R package designed implmente fuzzy clustering multivariate longitudinal data using tensor product smoothing splines. TPSfit() function fits splines three variables measured repeatedly time. cluster.fitted() cluster.coefs() functions can used identify fuzzy clusters data. Lastly, FKM.glm() function can used generate generalized linear model distal outcome using fuzzy clusters covariates predictors. number plot options available visualization data clusters.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Clustering Multivariate Longitudinal Data using Tensor-Product Splines","text":"can install development version TPSClus like (need update):","code":"devtools::install_github(\"silivingston/TPSClus\", dependencies = TRUE, build_vignettes = TRUE)"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Clustering Multivariate Longitudinal Data using Tensor-Product Splines","text":"Basic example flow using built-simulated dataset: Fit splines multivariate data: Run fuzzy clustering algorithm smoothed data using 3 clusters: Plot mean cluster trajectories:  Fit GLM using clusters covariates predictors: Predict outcome new dataset:","code":"library(TPSClus) data(TS.sim)  fitsplines2 <- TPSfit(TS.sim, vars=c(\"Var1\", \"Var2\", \"Var3\"), time=\"Time\", ID=\"SubjectID\", knots_time=c(0, 91, 182, 273, 365),      fit_times=c(46, 91, 137, 182, 228, 273, 319)) clusters1 <- cluster.fitted(fitsplines2, k=3, m=1.3, seed=12345, RS=5, noise=TRUE) summary(clusters1) #> cluster.fitted(TPSdata = fitsplines2, k = 3, m = 1.3, noise = TRUE,  #>     seed = 12345, RS = 5) #>  #> 150 subjects clustered into 3 clusters + noise cluster using m = 1.3  #> Clusters based on fitted values at times 46 91 137 182 228 273 319  #> and slopes between points #>  #> Cluster summary: #>       Cl.size Min.degree Max.degree Mean.degree #> Clus1      47      0.489          1       0.983 #> Clus2      50      0.483          1       0.980 #> Clus3      46      0.862          1       0.991 #> Noise       7      0.933          1       0.980 #>  #> Component 'FKM_TPS' contains the fuzzy clustering details from package 'fclust'. #> Components of 'FKM_TPS': #>  [1] \"U\"         \"H\"         \"F\"         \"clus\"      \"medoid\"    \"value\"     #>  [7] \"criterion\" \"iter\"      \"k\"         \"m\"         \"ent\"       \"b\"         #> [13] \"vp\"        \"delta\"     \"stand\"     \"Xca\"       \"X\"         \"D\"         #> [19] \"call\"      #>  #> Cluster validity indices: #>         PC         PE        MPC        SIL      SIL.F         XB  #> 0.92979979 0.04137373 0.89469968 0.46242525 0.48364829 0.24117979  #>  #> Output dataset 'FKM_TPS_U' contains degree of cluster membership and modal #>       cluster assignment for each object. #> Head of dataset 'FKM_TPS_U': #>   Id2 SubjectID        Clus1        Clus2        Clus3        Noise ClusModal #> 1   1        17 1.309679e-05 0.9999862733 8.929241e-08 5.406552e-07         2 #> 2   2        19 9.665821e-04 0.0004435711 9.972477e-01 1.342137e-03         3 #> 3   3        34 4.719129e-06 0.9999952117 1.255723e-08 5.657849e-08         2 #> 4   4        52 1.188519e-05 0.9999878294 4.352554e-08 2.418527e-07         2 #> 5   5        55 6.427492e-04 0.0003088823 9.982691e-01 7.792961e-04         3 #> 6   6        83 3.651509e-03 0.0012300893 9.802217e-01 1.489672e-02         3 plot(clusters1, legend_label_size=10) #> `geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = \"cs\")' model <- FKM.glm(clusters1, TS.sim, y=\"outcome\", covariates=c(\"x1\", \"x2\"), family=\"binomial\") summary(model) #> Full model: #> Formula (f1):  outcome ~ Clus2 + Clus3 + Noise + x1 + x2  #> Family: binomial  #>  #> Call: #> glm(formula = f1, family = family, data = data3) #>  #> Deviance Residuals:  #>      Min        1Q    Median        3Q       Max   #> -1.97164  -0.22557  -0.02179   0.13942   2.11563   #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|)     #> (Intercept) 10.42476    2.11640   4.926 8.41e-07 *** #> Clus2        1.15006    0.86491   1.330   0.1836     #> Clus3        2.37069    1.00594   2.357   0.0184 *   #> Noise        3.52023    1.73903   2.024   0.0429 *   #> x1           0.73342    0.68421   1.072   0.2838     #> x2          -0.27902    0.05381  -5.185 2.16e-07 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 201.065  on 149  degrees of freedom #> Residual deviance:  63.838  on 144  degrees of freedom #> AIC: 75.838 #>  #> Number of Fisher Scoring iterations: 7 #>  #>  #> ANOVA chi-square p-value for significance of clusters in model: #> 0.03360065 data(TS.sim.new) predicted <- predict(model, TS.sim.new) head(predicted) #>   SubjectID x1   x2 Id2        Clus1       Clus2        Clus3        Noise #> 1      1626  0 23.5   1 3.263066e-06 0.999996610 1.915778e-08 1.075745e-07 #> 2      1627  0 87.2   2 1.091953e-02 0.004496758 9.803848e-01 4.198949e-03 #> 3      1629  0 59.3   3 6.915108e-02 0.045432056 8.668493e-01 1.856759e-02 #> 4      1634  0 36.3   4 2.411935e-07 0.999999754 8.120729e-10 3.633010e-09 #> 5      1641  1 49.6   5 2.365786e-01 0.119455660 1.033256e-02 6.336331e-01 #> 6      1650  0 34.1   6 4.438164e-09 0.999999995 1.583192e-11 6.998691e-11 #>   ClusModal    predicted #> 1         2 9.934247e-01 #> 2         3 9.524077e-06 #> 3         3 1.891861e-02 #> 4         2 8.094402e-01 #> 5         0 4.282913e-01 #> 6         2 8.869764e-01"},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/reference/cluster.coefs.html","id":null,"dir":"Reference","previous_headings":"","what":"Fuzzy c-medoids clustering on tensor-product spline coefficients — cluster.coefs","title":"Fuzzy c-medoids clustering on tensor-product spline coefficients — cluster.coefs","text":"cluster.coefs() used apply fuzzy c-medoids clustering algorithm tensor-product spline coefficients output TPSfit function.","code":""},{"path":"/reference/cluster.coefs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fuzzy c-medoids clustering on tensor-product spline coefficients — cluster.coefs","text":"","code":"cluster.coefs(TPSdata, k, m = 1.2, noise = TRUE, seed, ...)"},{"path":"/reference/cluster.coefs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fuzzy c-medoids clustering on tensor-product spline coefficients — cluster.coefs","text":"TPSdata Output TPSfit function. k integer value indicating number clusters. m numeric value called 'fuzziness parameter.' Must greater 1, default 1.2. noise logical expression indicating whether noise cluster outliers included. seed optional numeric value seed, clustering algorithm uses random start values. ... Additional optional values employed fclust, including RS, number random starts, delta, distance outliers.","code":""},{"path":"/reference/cluster.coefs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fuzzy c-medoids clustering on tensor-product spline coefficients — cluster.coefs","text":"object class 'FKM.TPS' containing following components: FKM_TPS object output fclust algorithm. U  dataframe containing degrees cluster membership subject. Umax vector containing modal cluster assignment subject. FKM_TPS_U data frame containing subjects subject ID, degrees cluster membership, modal class assignment. FKM_indices vector containing values six cluster validity indices. See fclust::Fclust.index() wide_data data frame values clustered clustering algorithm plus subject IDs. TPSdata TPSfit object input function. noise Logical value used determine whether noise cluster included. k number clusters. m fuzziness parameter. IDmatch data frame matching original subject ID new consecutive ID values.","code":""},{"path":"/reference/cluster.coefs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fuzzy c-medoids clustering on tensor-product spline coefficients — cluster.coefs","text":"cluster.coefs() employs package fclust apply fuzzy c-medoids clustering algorithm tensor-product spline coefficients output TPSfit function. user options including noise cluster.","code":""},{"path":[]},{"path":"/reference/cluster.coefs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fuzzy c-medoids clustering on tensor-product spline coefficients — cluster.coefs","text":"","code":"library(dplyr); library(tidyr); library(fclust) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union #' data(TS.sim)  fitsplines <- TPSfit(TS.sim, vars=c(\"Var1\", \"Var2\", \"Var3\"), time=\"Time\",      ID=\"SubjectID\", knots_time=c(0, 91, 182, 273, 365), n_fit_times=10)  clusters2 <- cluster.coefs(fitsplines, k=3, m=1.3, seed=12345, RS=5, noise=TRUE) summary(clusters2) #> cluster.coefs(TPSdata = fitsplines, k = 3, m = 1.3, noise = TRUE,  #>     seed = 12345, RS = 5) #>  #> 150 subjects clustered into 3 clusters + noise cluster using m = 1.3  #> Clusters based on tensor-product splines coefficients #>  #> Cluster summary: #>       Cl.size Min.degree Max.degree Mean.degree #> Clus1      30      0.326      1.000       0.487 #> Clus2      49      0.354      1.000       0.921 #> Clus3      43      0.349      1.000       0.675 #> Noise      28      0.311      0.999       0.576 #>  #> Component 'FKM_TPS' contains the fuzzy clustering details from package 'fclust'. #> Components of 'FKM_TPS': #>  [1] \"U\"         \"H\"         \"F\"         \"clus\"      \"medoid\"    \"value\"     #>  [7] \"criterion\" \"iter\"      \"k\"         \"m\"         \"ent\"       \"b\"         #> [13] \"vp\"        \"delta\"     \"stand\"     \"Xca\"       \"X\"         \"D\"         #> [19] \"call\"      #>  #> Cluster validity indices: #>        PC        PE       MPC       SIL     SIL.F        XB  #> 0.5338480 0.5881223 0.3007721 0.1190551 0.1316716 2.3993223  #>  #> Output dataset 'FKM_TPS_U' contains degree of cluster membership and modal #>       cluster assignment for each object. #> Head of dataset 'FKM_TPS_U': #>   Id2 SubjectID        Clus1     Clus2        Clus3        Noise ClusModal #> 1   1        17 0.0001836595 0.9994971 0.0003074245 1.177236e-05         2 #> 2   2        19 0.4575291735 0.1261526 0.2864494603 1.298688e-01         1 #> 3   3        34 0.0020179751 0.9953520 0.0025581026 7.187532e-05         2 #> 4   4        52 0.0016033172 0.9964037 0.0018971158 9.585506e-05         2 #> 5   5        55 0.1687127692 0.2410988 0.2030380462 3.871503e-01         0 #> 6   6        83 0.1446869270 0.2082775 0.1342187362 5.128169e-01         0 #>"},{"path":"/reference/cluster.fitted.html","id":null,"dir":"Reference","previous_headings":"","what":"Fuzzy c-medoids clustering on fitted values of splines — cluster.fitted","title":"Fuzzy c-medoids clustering on fitted values of splines — cluster.fitted","text":"cluster.fitted() used apply fuzzy c-medoids clustering algorithm fitted values output TPSfit function.","code":""},{"path":"/reference/cluster.fitted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fuzzy c-medoids clustering on fitted values of splines — cluster.fitted","text":"","code":"cluster.fitted(   TPSdata,   center = TRUE,   addslopes = TRUE,   k,   m = 1.2,   noise = TRUE,   seed,   ... )"},{"path":"/reference/cluster.fitted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fuzzy c-medoids clustering on fitted values of splines — cluster.fitted","text":"TPSdata Output TPSfit function. center logical expression indicating trajectories centered individual means. addslopes logical expression indicating clustering conducted slopes fitted time-points addition cross-sectional values point. k integer value indicating number clusters. m numeric value called 'fuzziness parameter.' Must greater 1, default 1.2. noise logical expression indicating whether noise cluster outliers included. seed optional numeric value seed, clustering algorithm uses random start values. ... Additional optional values employed fclust, including RS, number random starts, delta, distance outliers.","code":""},{"path":"/reference/cluster.fitted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fuzzy c-medoids clustering on fitted values of splines — cluster.fitted","text":"object class 'FKM.TPS' containing following components: FKM_TPS object output fclust algorithm. U  dataframe containing degrees cluster membership subject. Umax vector containing modal cluster assignment subject. FKM_TPS_U data frame containing subjects subject ID, degrees cluster membership, modal class assignment. FKM_indices vector containing values six cluster validity indices. See fclust::Fclust.index() wide_data data frame values clustered clustering algorithm plus subject IDs. TPSdata TPSfit object input function. center Logical value used determine whether center individual trajectories. noise Logical value used determine whether noise cluster included. k number clusters. m fuzziness parameter. addslopes Logical value used determine whether include slopes fitted time-points. IDmatch data frame matching original subject ID new consecutive ID values.","code":""},{"path":"/reference/cluster.fitted.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fuzzy c-medoids clustering on fitted values of splines — cluster.fitted","text":"cluster.fitted() employs package fclust apply fuzzy c-medoids clustering algorithm fitted tensor-product spline values output TPSfit function. user options including noise cluster centering trajectories individual means. addslopes option cluster slopes fitted time-points addition cross-sectional fitting points.","code":""},{"path":[]},{"path":"/reference/cluster.fitted.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fuzzy c-medoids clustering on fitted values of splines — cluster.fitted","text":"","code":"library(dplyr); library(tidyr); library(fclust) data(TS.sim)  fitsplines <- TPSfit(TS.sim, vars=c(\"Var1\", \"Var2\", \"Var3\"), time=\"Time\",      ID=\"SubjectID\", knots_time=c(0, 91, 182, 273, 365), n_fit_times=10)  clusters1 <- cluster.fitted(fitsplines, k=3, m=1.3, seed=12345, RS=5, noise=TRUE) summary(clusters1) #> cluster.fitted(TPSdata = fitsplines, k = 3, m = 1.3, noise = TRUE,  #>     seed = 12345, RS = 5) #>  #> 150 subjects clustered into 3 clusters + noise cluster using m = 1.3  #> Clusters based on fitted values at times 0 40.44444 80.88889 121.3333 161.7778 202.2222 242.6667 283.1111 323.5556 364  #> and slopes between points #>  #> Cluster summary: #>       Cl.size Min.degree Max.degree Mean.degree #> Clus1      47      0.764          1       0.988 #> Clus2      46      0.872          1       0.989 #> Clus3      49      0.698          1       0.990 #> Noise       8      0.957          1       0.990 #>  #> Component 'FKM_TPS' contains the fuzzy clustering details from package 'fclust'. #> Components of 'FKM_TPS': #>  [1] \"U\"         \"H\"         \"F\"         \"clus\"      \"medoid\"    \"value\"     #>  [7] \"criterion\" \"iter\"      \"k\"         \"m\"         \"ent\"       \"b\"         #> [13] \"vp\"        \"delta\"     \"stand\"     \"Xca\"       \"X\"         \"D\"         #> [19] \"call\"      #>  #> Cluster validity indices: #>         PC         PE        MPC        SIL      SIL.F         XB  #> 0.92767342 0.03821568 0.89151013 0.35189879 0.37201800 0.22314197  #>  #> Output dataset 'FKM_TPS_U' contains degree of cluster membership and modal #>       cluster assignment for each object. #> Head of dataset 'FKM_TPS_U': #>   Id2 SubjectID        Clus1        Clus2        Clus3        Noise ClusModal #> 1   1        17 5.172103e-07 2.007963e-05 0.9999782952 1.107976e-06         3 #> 2   2        19 9.991481e-01 2.902820e-04 0.0002348860 3.266833e-04         1 #> 3   3        34 7.820025e-08 6.215939e-06 0.9999935927 1.131528e-07         3 #> 4   4        52 2.556221e-07 1.533165e-05 0.9999839290 4.836864e-07         3 #> 5   5        55 9.984985e-01 5.331182e-04 0.0003056236 6.627689e-04         1 #> 6   6        83 9.565796e-01 1.081446e-02 0.0055381485 2.706777e-02         1 #>"},{"path":"/reference/FKM.glm.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a generalized linear model (GLM) using clusters a predictors — FKM.glm","title":"Fit a generalized linear model (GLM) using clusters a predictors — FKM.glm","text":"FKM.glm() fits generalized linear model (GLM) using clusters output cluster.fitted() cluster.coefs() predictors, along additional covariates.","code":""},{"path":"/reference/FKM.glm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a generalized linear model (GLM) using clusters a predictors — FKM.glm","text":"","code":"FKM.glm(FKM_object, data, y, covariates, refclus = 1, family = \"gaussian\", ...)"},{"path":"/reference/FKM.glm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a generalized linear model (GLM) using clusters a predictors — FKM.glm","text":"FKM_object object class FKM.TPS output cluster.fitted() cluster.coefs(). data data frame subjects used spline-fitting clustering includes outcome variable interest optional covariates. y Name outcome variable (e.g. y=\"Death\") covariates vector covariates interest included model. refclus Numeric identification cluster used reference cluster. Default cluster 1 (refclus=1). Use refclus=0 identify noise cluster reference cluster. family description error distribution link function used model. ... Additional arguments glm function.","code":""},{"path":"/reference/FKM.glm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a generalized linear model (GLM) using clusters a predictors — FKM.glm","text":"object class FKM.glm containing following components: FKM_object inputted object class FKM.TPS. model_data data frame containing variables used model, including degree cluster membership. formula formula used model. family family call used model. model_full GLM model using clusters predictors additional covariates interest. model_noclusters GLM model using covariates interest clusters. anova ANOVA comparing models without clusters predictors. anova_pval P-value ANOVA comparing models without clusters predictors.","code":""},{"path":"/reference/FKM.glm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit a generalized linear model (GLM) using clusters a predictors — FKM.glm","text":"FKM.glm() applies glm function fit generalized linear model using clusters predictors. Clusters obtained using cluster.fitted() cluster.coefs(), output object class FKM.TPS input FKM.glm() function, along dataset containing output variable additional covariates interest. Clusters included using \"partial assignment\" method employs degree cluster membership individual account uncertainty cluster assignment.","code":""},{"path":[]},{"path":"/reference/FKM.glm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a generalized linear model (GLM) using clusters a predictors — FKM.glm","text":"","code":"library(tidyr); library(dplyr); library(mgcv); library(fclust) #> Loading required package: nlme #>  #> Attaching package: 'nlme' #> The following object is masked from 'package:dplyr': #>  #>     collapse #> This is mgcv 1.8-36. For overview type 'help(\"mgcv-package\")'. data(TS.sim)  fitsplines <- TPSfit(TS.sim, vars=c(\"Var1\", \"Var2\", \"Var3\"), time=\"Time\",      ID=\"SubjectID\", knots_time=c(0, 91, 182, 273, 365), n_fit_times=10)  clusters1 <- cluster.fitted(fitsplines, k=3, m=1.3, seed=12345, RS=5, noise=TRUE)  model <- FKM.glm(clusters1, TS.sim, y=\"outcome\", covariates=c(\"x1\", \"x2\"), family=\"binomial\") summary(model) #> Full model: #> Formula (f1):  outcome ~ Clus2 + Clus3 + Noise + x1 + x2  #> Family: binomial  #>  #> Call: #> glm(formula = f1, family = family, data = data3) #>  #> Deviance Residuals:  #>      Min        1Q    Median        3Q       Max   #> -1.98641  -0.22509  -0.02046   0.14030   2.13265   #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|)     #> (Intercept) 12.91873    2.58402   4.999 5.75e-07 *** #> Clus2       -2.51549    1.00954  -2.492   0.0127 *   #> Clus3       -1.27507    0.82022  -1.555   0.1201     #> Noise        0.99726    1.59330   0.626   0.5314     #> x1           0.78247    0.68891   1.136   0.2560     #> x2          -0.28124    0.05409  -5.200 1.99e-07 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 201.065  on 149  degrees of freedom #> Residual deviance:  63.197  on 144  degrees of freedom #> AIC: 75.197 #>  #> Number of Fisher Scoring iterations: 7 #>  #>  #> ANOVA chi-square p-value for significance of clusters in model: #> 0.02512377 model$anova_pval #> [1] 0.02512377"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/plot.FKM.glm.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot glm that uses clusters as predictors — plot.FKM.glm","title":"Plot glm that uses clusters as predictors — plot.FKM.glm","text":"Employs plot.glm function plot generalized linear model clusters additional covariates predictors.","code":""},{"path":"/reference/plot.FKM.glm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot glm that uses clusters as predictors — plot.FKM.glm","text":"","code":"# S3 method for FKM.glm plot(x, ...)"},{"path":"/reference/plot.FKM.glm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot glm that uses clusters as predictors — plot.FKM.glm","text":"x output object class FKM.glm. ... Additional arguments.","code":""},{"path":"/reference/plot.FKM.glm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot glm that uses clusters as predictors — plot.FKM.glm","text":"plot.glm plot.","code":""},{"path":"/reference/plot.FKM.predicted.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot an object of class FKM.predicted — plot.FKM.predicted","title":"Plot an object of class FKM.predicted — plot.FKM.predicted","text":"Plot object class FKM.predicted","code":""},{"path":"/reference/plot.FKM.predicted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot an object of class FKM.predicted — plot.FKM.predicted","text":"","code":"# S3 method for FKM.predicted plot(   x,   center = TRUE,   xmin,   xmax,   ntime = 100,   lab_x,   lab_y,   bw = TRUE,   title,   title_size = 15,   axis_label_size = 15,   axis_title_size = 15,   legend_label_size = 15,   strip_label_size = 15,   type = \"raw_grid\",   ... )"},{"path":"/reference/plot.FKM.predicted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot an object of class FKM.predicted — plot.FKM.predicted","text":"x object class FKM.predicted center Logical expression indicating whether trajectories centered individual means. xmin, xmax Optional minimum maximum values show x-axis. ntime Optional number times calculate fitted values smoothed plots. lab_x, lab_y Optional labels x- y-axis. bw Logical expression black white graphic. title Optional title. title_size Optional title size. axis_label_size Optional size axis labels. axis_title_size Optional size axis titles. legend_label_size Optional size legend. strip_label_size Optional size strip labels graphics. type Type plot produce. Options \"raw\", \"raw_grid\", \"smooth\", \"smooth_grid\". ... Additional arguments","code":""},{"path":"/reference/plot.FKM.predicted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot an object of class FKM.predicted — plot.FKM.predicted","text":"plot raw smoothed trajectories new data predicted cluster assignment.","code":""},{"path":"/reference/plot.FKM.predicted.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot an object of class FKM.predicted — plot.FKM.predicted","text":"","code":"library(tidyr); library(dplyr); library(mgcv); library(fclust); library(ggplot2) data(TS.sim)  fitsplines <- TPSfit(TS.sim, vars=c(\"Var1\", \"Var2\", \"Var3\"), time=\"Time\",      ID=\"SubjectID\", knots_time=c(0, 91, 182, 273, 365), n_fit_times=10)  clusters1 <- cluster.fitted(fitsplines, k=3, m=1.3, seed=12345, RS=5, noise=TRUE)  predicted_clusters <- predict(clusters1, TS.sim.new) plot(predicted_clusters, label_size=10, type=\"raw_grid\")"},{"path":"/reference/plot.FKM.TPS.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot an object of class 'FKM.TPS' — plot.FKM.TPS","title":"Plot an object of class 'FKM.TPS' — plot.FKM.TPS","text":"Produces number plots object class FKM.TPS using ggplot2::ggplot(). Possible plots include mean trajectory cluster, spaghetti plot raw data cluster overlaid grid format, smoothed spaghetti plot cluster overlaid grid format.","code":""},{"path":"/reference/plot.FKM.TPS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot an object of class 'FKM.TPS' — plot.FKM.TPS","text":"","code":"# S3 method for FKM.TPS plot(   x,   center = TRUE,   xmin,   xmax,   ntime = 100,   lab_x,   lab_y,   bw = FALSE,   title,   title_size = 15,   axis_label_size = 15,   axis_title_size = 15,   legend_label_size = 15,   strip_label_size = 15,   type = \"mean\",   ... )"},{"path":"/reference/plot.FKM.TPS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot an object of class 'FKM.TPS' — plot.FKM.TPS","text":"x object class FKM.TPS output cluster.fitted cluster.coefs center Logical expression indicating whether center trajectories individual means. xmin, xmax Optional minimum maximum values show x-axis. ntime Optional number times calculate fitted values smoothed plots. lab_x, lab_y Optional labels x- y-axis. bw Logical expression black white graphic. title Optional title. title_size Optional title size. axis_label_size Optional size axis labels. axis_title_size Optional size axis titles. legend_label_size Optional size legend. strip_label_size Optional size strip labels graphics. type Type plot produce. Options \"mean\", \"smooth\", \"smooth_grid\", \"raw\", \"raw_grid\", \"\". ... Additional arguments","code":""},{"path":"/reference/plot.FKM.TPS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot an object of class 'FKM.TPS' — plot.FKM.TPS","text":"plot data cluster.","code":""},{"path":"/reference/plot.FKM.TPS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot an object of class 'FKM.TPS' — plot.FKM.TPS","text":"","code":"library(tidyr); library(dplyr); library(mgcv); library(fclust); library(ggplot2) data(TS.sim)  fitsplines <- TPSfit(TS.sim, vars=c(\"Var1\", \"Var2\", \"Var3\"), time=\"Time\",      ID=\"SubjectID\", knots_time=c(0, 91, 182, 273, 365), n_fit_times=10)  clusters1 <- cluster.fitted(fitsplines, k=3, m=1.3, seed=12345, RS=5, noise=TRUE) plot(clusters1, type=\"raw_grid\", strip_label_size=10, axis_label_size=10)  plot(clusters1, type=\"mean\", legend_label_size=15, lab_y=\"Outcome\") #> `geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = \"cs\")'"},{"path":"/reference/plot.TPSfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot an object of class TPSfit. — plot.TPSfit","title":"Plot an object of class TPSfit. — plot.TPSfit","text":"Plots object class TPSfit, option plot either raw smoothed data.","code":""},{"path":"/reference/plot.TPSfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot an object of class TPSfit. — plot.TPSfit","text":"","code":"# S3 method for TPSfit plot(   x,   center = TRUE,   xmin,   xmax,   ntime = 100,   lab_x,   lab_y,   bw = FALSE,   title,   title_size = 15,   axis_label_size = 15,   axis_title_size = 15,   legend_label_size = 15,   strip_label_size = 15,   type = \"raw\",   ... )"},{"path":"/reference/plot.TPSfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot an object of class TPSfit. — plot.TPSfit","text":"x Object class TPSfit. center Logical expression indicating whether center data individual trajectories. xmin, xmax Optional minimum maximum values show x-axis. ntime Optional number times calculate fitted values smoothed plots. lab_x, lab_y Optional labels x- y-axis. bw Logical expression black white graphic. title Optional title. title_size Optional title size. axis_label_size Optional size axis labels. axis_title_size Optional size axis titles. legend_label_size Size legend label, applicable strip_label_size Optional size strip labels graphics. type Type plot produce. Options \"smooth\", \"raw\", \"\". ... Additional arguments","code":""},{"path":"/reference/plot.TPSfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot an object of class TPSfit. — plot.TPSfit","text":"plot raw smoothed data.","code":""},{"path":"/reference/plot.TPSfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot an object of class TPSfit. — plot.TPSfit","text":"","code":"library(tidyr); library(dplyr); library(mgcv); library(ggplot2) data(TS.sim)  fitsplines <- TPSfit(TS.sim, vars=c(\"Var1\", \"Var2\", \"Var3\"), time=\"Time\",      ID=\"SubjectID\", knots_time=c(0, 91, 182, 273, 365), n_fit_times=10) plot(fitsplines, type=\"smooth\")"},{"path":"/reference/predict.FKM.glm.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict the model outcome for a new set of data — predict.FKM.glm","title":"Predict the model outcome for a new set of data — predict.FKM.glm","text":"Predict model outcome new set data first fitting tensor-product splines new dataset identifying degree cluster membership previously identified clusters.","code":""},{"path":"/reference/predict.FKM.glm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict the model outcome for a new set of data — predict.FKM.glm","text":"","code":"# S3 method for FKM.glm predict(object, newdata, ...)"},{"path":"/reference/predict.FKM.glm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict the model outcome for a new set of data — predict.FKM.glm","text":"object object class FKM.glm found modeling outcome based cluster membership degrees. newdata new data containing variables clustered used covariates model. ... Additional arguments.","code":""},{"path":"/reference/predict.FKM.glm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict the model outcome for a new set of data — predict.FKM.glm","text":"data frame containing degree cluster membership individual new dataset predicted outcome.","code":""},{"path":"/reference/predict.FKM.glm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict the model outcome for a new set of data — predict.FKM.glm","text":"","code":"# Fit initial model data(TS.sim)  fitsplines <- TPSfit(TS.sim, vars=c(\"Var1\", \"Var2\", \"Var3\"), time=\"Time\",      ID=\"SubjectID\", knots_time=c(0, 91, 182, 273, 365), n_fit_times=10)  clusters1 <- cluster.fitted(fitsplines, k=3, m=1.3, seed=12345, RS=5, noise=TRUE)  model <- FKM.glm(clusters1, TS.sim, y=\"outcome\", covariates=c(\"x1\", \"x2\"), family=\"binomial\")  # Get new dataset data(TS.sim.new) predicted <- predict(model, TS.sim.new)"},{"path":"/reference/predict.FKM.TPS.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict the cluster assignment for new subjects — predict.FKM.TPS","title":"Predict the cluster assignment for new subjects — predict.FKM.TPS","text":"clustering set trajectory data, predict cluster assignment new subjects.","code":""},{"path":"/reference/predict.FKM.TPS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict the cluster assignment for new subjects — predict.FKM.TPS","text":"","code":"# S3 method for FKM.TPS predict(object, newdata, ...)"},{"path":"/reference/predict.FKM.TPS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict the cluster assignment for new subjects — predict.FKM.TPS","text":"object object class FKM.TPS previously identified clusters. newdata new data frame containing subjects variables previously used clustering. ... Additional arguments.","code":""},{"path":"/reference/predict.FKM.TPS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict the cluster assignment for new subjects — predict.FKM.TPS","text":"object class 'FKM.predicted' containing following components: predicted_U data frame containing subjects degree cluster membership modal cluster assignment. U degrees cluster membership subject. Umax modal class assignment subject. wide_data data frame containing values clustered . IDmatch data frame matching original subject ID variable new consecutive subject ID. TPSdata object class TPSfit containing fitted splines new subjects. FKM_TPS inputted object class FKM.TPS. noise Logical expression indicating whether noise cluster included outliers. k number clusters. m fuzziness parameter.","code":""},{"path":"/reference/predict.FKM.TPS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict the cluster assignment for new subjects — predict.FKM.TPS","text":"","code":"library(dplyr); library(tidyr); library(fclust) data(TS.sim)  fitsplines <- TPSfit(TS.sim, vars=c(\"Var1\", \"Var2\", \"Var3\"), time=\"Time\",      ID=\"SubjectID\", knots_time=c(0, 91, 182, 273, 365), n_fit_times=10)  clusters1 <- cluster.fitted(fitsplines, k=3, m=1.3, seed=12345, RS=5, noise=TRUE)  predicted_clusters <- predict(clusters1, TS.sim.new) summary(predicted_clusters) #> Object of type 'FKM.predicted' #> predict.FKM.TPS(object = clusters1, newdata = TS.sim.new) #>  #> Tensor-product splines fit for 30 out of 30 subjects #>  #> Degree of membership calculated based on clusters from input 'FKM.TPS' object. #> 30 subjects clustered into 3 clusters + noise cluster #>  #> Clusters based on fitted values at times 0 40.44444 80.88889 121.3333 161.7778 202.2222 242.6667 283.1111 323.5556 364  #> and slopes between points #>  #> Cluster summary for new data: #>       Cl.size Min.degree Max.degree Mean.degree #> Clus1       8      0.974      0.996       0.985 #> Clus2      10      0.954      1.000       0.993 #> Clus3      11      0.436      1.000       0.908 #> Noise       1      0.800      0.800       0.800 #>  #> Output dataset 'predicted_U' contains degree of cluster membership and modal #>       cluster assignment for each object. #> Head of dataset 'predicted_U': #>   Id2 SubjectID        Clus1        Clus2       Clus3        Noise ClusModal #> 1   1      1626 1.092245e-07 4.488422e-06 0.999995187 2.151411e-07         3 #> 2   2      1627 9.840527e-01 8.237368e-03 0.004473630 3.236267e-03         1 #> 3   3      1629 9.804113e-01 7.494699e-03 0.008777124 3.316871e-03         1 #> 4   4      1634 5.604186e-09 3.366604e-07 0.999999650 7.265761e-09         3 #> 5   5      1641 1.234028e-02 1.118469e-01 0.075447127 8.003657e-01         0 #> 6   6      1650 1.054592e-10 6.247860e-09 0.999999994 1.399693e-10         3 #>"},{"path":"/reference/TPSClus-package.html","id":null,"dir":"Reference","previous_headings":"","what":"TPSClus: Clustering Multivariate Longitudinal Data using Tensor-Product Splines — TPSClus-package","title":"TPSClus: Clustering Multivariate Longitudinal Data using Tensor-Product Splines — TPSClus-package","text":"Functions fitting tensor-product splines multivariate longitudinal data, fuzzy clustering fitted values splines spline coefficients.","code":""},{"path":[]},{"path":"/reference/TPSClus-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"TPSClus: Clustering Multivariate Longitudinal Data using Tensor-Product Splines — TPSClus-package","text":"Maintainer: Sherry Livingston sherry..livingston@gmail.com (ORCID)","code":""},{"path":"/reference/TPSfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit tensor product splines to longitudinal data — TPSfit","title":"Fit tensor product splines to longitudinal data — TPSfit","text":"TPSfit() used fit multidimensional tensor product splines longitudinal data three variable interest prior implementation clustering algorithm.","code":""},{"path":"/reference/TPSfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit tensor product splines to longitudinal data — TPSfit","text":"","code":"TPSfit(data, time, vars, ID, knots_time, kt, fit_times, n_fit_times, st = TRUE)"},{"path":"/reference/TPSfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit tensor product splines to longitudinal data — TPSfit","text":"data longitudinal dataset long form multiple variables measured time. time Name time variable (e.g. \"Time\"). vars character vector least 3 variables interest. ID Name subject ID variable. knots_time numeric vector knots spline-fitting time variable. Must supply knots_time kt. kt Number evenly spaced knots spline-fitting time variable knots_time given. fit_times Optional vector times fitted values calculated. fit_times n_fit_times given, fitted values calculated knots. n_fit_times Number evenly spaced times fitted values calculated fit_times given. st Logical expression indicating whether variable standardized.","code":""},{"path":"/reference/TPSfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit tensor product splines to longitudinal data — TPSfit","text":"object class 'TPSfit' containing following components: GAMsfitted data frame containing fitted spline values. GAMscoef data frame containing tensor product spline coefficients data_long data frame containing data long format time variable knots list two vectors containing variable time knots indiv_means list containing data frame individual means variables interest GAMs list containing generalized additive models fitting splines individual nsubject number subjects dataset IDmatch data frame matching original subject ID new consecutive ID numbers error_subjects vector individuals encountered errors spline-fitting process","code":""},{"path":"/reference/TPSfit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit tensor product splines to longitudinal data — TPSfit","text":"TPSfit() employs package mgcv fit tensor product splines individual using generalized additive model. fitted splines two-dimensional, one dimension variable identifier time. adequate number observed time points required individual, number knots less smallest number time points. splines unable fit individual, error message shown, splines fit remaining individuals. vector identifiers individuals errors included output error_subjects, subjects included output GAMSsfitted GAMscoef.","code":""},{"path":[]},{"path":"/reference/TPSfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit tensor product splines to longitudinal data — TPSfit","text":"","code":"library(tidyr); library(dplyr); library(mgcv) data(TS.sim)  fitsplines <- TPSfit(TS.sim, vars=c(\"Var1\", \"Var2\", \"Var3\"), time=\"Time\",      ID=\"SubjectID\", knots_time=c(0, 91, 182, 273, 365), n_fit_times=10)  fitsplines2 <- TPSfit(TS.sim, vars=c(\"Var1\", \"Var2\", \"Var3\"), time=\"Time\", ID=\"SubjectID\", knots_time=c(0, 91, 182, 273, 365),      fit_times=c(46, 91, 137, 182, 228, 273, 319))"},{"path":"/reference/TS.sim.html","id":null,"dir":"Reference","previous_headings":"","what":"A data frame of simulated multivariate time series data — TS.sim","title":"A data frame of simulated multivariate time series data — TS.sim","text":"data frame simulated multivariate time series data 150 individuals one year.","code":""},{"path":"/reference/TS.sim.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A data frame of simulated multivariate time series data — TS.sim","text":"data frame 1919 observations 8 variables: SubjectID Identifier subject Time Time variable ranging 0 365. Var1, Var2, Var3 Variables smoothed clustered . x1, x2 Covariates modeling outcome. outcome Binary outcome variable.","code":""},{"path":"/reference/TS.sim.new.html","id":null,"dir":"Reference","previous_headings":"","what":"A data frame of simulated multivariate time series data for predictions — TS.sim.new","title":"A data frame of simulated multivariate time series data for predictions — TS.sim.new","text":"data frame simulated multivariate time series data 30 individuals one year.","code":""},{"path":"/reference/TS.sim.new.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A data frame of simulated multivariate time series data for predictions — TS.sim.new","text":"data frame 325 observations 7 variables: SubjectID Identifier subject Time Time variable ranging 0 365. Var1, Var2, Var3 Variables smoothed clustered . x1, x2 Covariates modeling outcome.","code":""},{"path":"/news/index.html","id":"tpsclus-0009000-development-version","dir":"Changelog","previous_headings":"","what":"TPSClus 0.0.0.9000 (development version)","title":"TPSClus 0.0.0.9000 (development version)","text":"Added NEWS.md file track changes package.","code":""}]
